function book() {
  function get() {
    return point;
  }
  var point = 123;
  return get();
}
console.log(book());
// 123
/**
 * JS 엔진 관점에서, 123이 출력되는 과정 서술
 * - book Function 오브젝트의 [[ Scope ]] 에 글로벌 오브젝트 설정
 * - 변수,함수표현식 해석과정은 더이상 할 것없으니 점프
 * - 마지막 부븐의 book() 함수를 호출한다.
 * 
 * book() 함수의 실행 콘텍스트
 * [ 준비단계 ]
 * - book 함수의, 내부적으로 실행 콘텍스트 환경 컴포넌트들(LEC,VEC,TBC) 이 생성되고, 실행 컨텍스트에 첨부한다.
 * - LEC 내부에는, 환경 레코드(ER) 이 생성되고, 초기화 된다.
 * - 외부 렉시컬 환경 참조를 생성하고, 렉시컬 환경 컴포넌트에 첨부한다.
 *   + 이것은, book function 오브젝트의 [[ Scope ]] 를 참조
 * [ 초기화 단계 ]
 * 실행 콘텍스트(EC) : {
    렉시컬 환경 컴포넌트(LEC) : {
        환경 레코드(ER) : {
            get : function 오브젝트
            point : undefined
        }
        외부 렉시컬 환경 참조(OLER) : {}
    },
    변수 환경 컴포넌트(VEC) : {},
    This 바인딩 컴포넌트(TBC) : {}
}
 * 환경 레코드에 get functio 오브젝트를 생성하고, [[ Scope ]] 스코프로 book 오브젝트를 설정, point 변수에 undefined 설정
 * 여기까지는 외부에 실행상태를 제공하지 않는다.
 * 
 * [실행 단계]
 * point 변수에 123할당
 * get() 함수의 실행 콘텍스트를 생성하고, 실행 콘텍스트 안으로, 엔진 컨트롤이 이동
 * 
 * get() 함수의 실행 콘텍스트
 * [ 준비 단계 ] 
 * 실행 컨텍스트에, 컴포넌트들(LEC,VEC,TBC)을 생성해서 첨부
 * LEC 내부에, 환경 레코드(ER) 를 생성하고, 첨부
 * LEC 내부에, 외부 렉시컬 환경 참조를 생성하고, 첨부
 *  + get() function 오브젝트의 [[ Scope ]] 를 설정
 * 실행 콘텍스트(EC) : {
    렉시컬 환경 컴포넌트(LEC) : {
        환경 레코드(ER) : {}
        외부 렉시컬 환경 참조(OLER) : {
            point : 123
        }
    },
    변수 환경 컴포넌트(VEC) : {},
    This 바인딩 컴포넌트(TBC) : {}
}
 * [ 초기화 단계 ]
 * function 선언문이나, 변수가 없다.
 * [ 실행 단계 ]
 * return point 를 만나고, point 식별자를, 외부 렉시컬 환경 참조에서 찾아 123 반환
 */
